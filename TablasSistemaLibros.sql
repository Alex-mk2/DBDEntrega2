-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.boleta
(
    id_boleta integer NOT NULL,
    resumen_compra character varying(255) COLLATE pg_catalog."default" NOT NULL,
    total_pagado integer NOT NULL,
    id_carro integer NOT NULL,
    id_usuario integer NOT NULL,
    CONSTRAINT boleta_pkey PRIMARY KEY (id_boleta)
);

CREATE TABLE IF NOT EXISTS public.carrito_de_compras
(
    id_carro integer NOT NULL,
    num_productos integer NOT NULL,
    id_metodo_pago integer NOT NULL,
    id_usuario integer NOT NULL,
    id_libro integer NOT NULL,
    CONSTRAINT carrito_de_compras_pkey PRIMARY KEY (id_carro)
);

CREATE TABLE IF NOT EXISTS public.categoria
(
    id_categoria integer NOT NULL,
    nombre_categoria character varying(30) COLLATE pg_catalog."default" NOT NULL,
    descripcion_categoria character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT categoria_pkey PRIMARY KEY (id_categoria)
);

CREATE TABLE IF NOT EXISTS public.categoria_libro
(
    id_categoria integer NOT NULL,
    id_libro integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.libro
(
    id_libro integer NOT NULL,
    autor character varying(50) COLLATE pg_catalog."default" NOT NULL,
    titulo character varying(50) COLLATE pg_catalog."default" NOT NULL,
    visitas integer NOT NULL,
    precio integer NOT NULL,
    stock integer NOT NULL,
    favoritos integer NOT NULL,
    id_usuario integer NOT NULL,
    CONSTRAINT libro_pkey PRIMARY KEY (id_libro)
);

CREATE TABLE IF NOT EXISTS public.libro_restriccion
(
    id_libro integer NOT NULL,
    id_restriccion integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.lista_favoritos
(
    id_lista_f integer NOT NULL,
    cantidad integer NOT NULL,
    nombre_lista character varying(50) COLLATE pg_catalog."default" NOT NULL,
    id_usuario integer NOT NULL,
    CONSTRAINT lista_favoritos_pkey PRIMARY KEY (id_lista_f)
);

CREATE TABLE IF NOT EXISTS public.lista_libro
(
    id_lista_f integer NOT NULL,
    id_libro integer NOT NULL,
    CONSTRAINT lista_libro_pkey PRIMARY KEY (id_lista_f)
);

CREATE TABLE IF NOT EXISTS public.metodo_pago
(
    id_metodo_pago integer NOT NULL,
    tipo_pago character varying(30) COLLATE pg_catalog."default" NOT NULL,
    estado_pago boolean NOT NULL,
    id_boletas integer NOT NULL,
    CONSTRAINT metodo_pago_pkey PRIMARY KEY (id_metodo_pago)
);

CREATE TABLE IF NOT EXISTS public.resena
(
    id_usuario integer NOT NULL,
    id_libro integer NOT NULL,
    nota integer NOT NULL,
    descripcion character varying(255) COLLATE pg_catalog."default" NOT NULL,
    fecha date NOT NULL
);

CREATE TABLE IF NOT EXISTS public.restriccion
(
    id_restriccion integer NOT NULL,
    edad_minima integer NOT NULL,
    CONSTRAINT restriccion_pkey PRIMARY KEY (id_restriccion)
);

CREATE TABLE IF NOT EXISTS public.restriccion_ubicacion
(
    id_restriccion integer NOT NULL,
    id_ubicacion integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.rol
(
    id_rol integer NOT NULL,
    nombre_rol character varying(30) COLLATE pg_catalog."default" NOT NULL,
    descripcion character varying(255) COLLATE pg_catalog."default" NOT NULL,
    permisos character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT rol_pkey PRIMARY KEY (id_rol)
);

CREATE TABLE IF NOT EXISTS public.sesion
(
    id_sesion integer NOT NULL,
    id_usuario integer NOT NULL,
    comienzo_sesion date,
    fin_sesion date,
    CONSTRAINT sesion_pkey PRIMARY KEY (id_sesion)
);

CREATE TABLE IF NOT EXISTS public.ubicacion
(
    id_ubicacion integer NOT NULL,
    pais character varying(30) COLLATE pg_catalog."default" NOT NULL,
    ciudad character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT ubicacion_pkey PRIMARY KEY (id_ubicacion)
);

CREATE TABLE IF NOT EXISTS public.usuario
(
    id_usuario integer NOT NULL,
    nombre character varying(30) COLLATE pg_catalog."default" NOT NULL,
    correo character varying(30) COLLATE pg_catalog."default" NOT NULL,
    contrasena character varying(15) COLLATE pg_catalog."default" NOT NULL,
    telefono character varying(12) COLLATE pg_catalog."default",
    fecha_nacimiento date NOT NULL,
    id_ubicacion integer NOT NULL,
    CONSTRAINT usuario_pkey PRIMARY KEY (id_usuario)
);

CREATE TABLE IF NOT EXISTS public.usuario_libro
(
    id_libro integer NOT NULL,
    id_usuario integer NOT NULL,
    CONSTRAINT usuario_libro_pkey PRIMARY KEY (id_libro)
);

CREATE TABLE IF NOT EXISTS public.usuario_rol
(
    id_usuario integer NOT NULL,
    id_rol integer NOT NULL
);

ALTER TABLE IF EXISTS public.boleta
    ADD CONSTRAINT id_carro FOREIGN KEY (id_carro)
    REFERENCES public.carrito_de_compras (id_carro) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.boleta
    ADD CONSTRAINT id_usuario FOREIGN KEY (id_usuario)
    REFERENCES public.usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTIONid_catego
    NOT VALID;


ALTER TABLE IF EXISTS public.carrito_de_compras
    ADD CONSTRAINT id_libro FOREIGN KEY (id_libro)
    REFERENCES public.libro (id_libro) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.carrito_de_compras
    ADD CONSTRAINT id_metodo_pago FOREIGN KEY (id_metodo_pago)
    REFERENCES public.metodo_pago (id_metodo_pago) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.carrito_de_compras
    ADD CONSTRAINT id_usuario FOREIGN KEY (id_usuario)
    REFERENCES public.usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.categoria_libro
    ADD CONSTRAINT id_categoria FOREIGN KEY (id_categoria)
    REFERENCES public.categoria (id_categoria) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.categoria_libro
    ADD CONSTRAINT id_libro FOREIGN KEY (id_libro)
    REFERENCES public.libro (id_libro) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.libro
    ADD CONSTRAINT id_usuario FOREIGN KEY (id_usuario)
    REFERENCES public.usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.libro_restriccion
    ADD CONSTRAINT id_libro FOREIGN KEY (id_libro)
    REFERENCES public.libro (id_libro) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.libro_restriccion
    ADD CONSTRAINT id_restriccion FOREIGN KEY (id_restriccion)
    REFERENCES public.restriccion (id_restriccion) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.lista_favoritos
    ADD CONSTRAINT id_usuario FOREIGN KEY (id_usuario)
    REFERENCES public.usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.lista_libro
    ADD CONSTRAINT id_libro FOREIGN KEY (id_libro)
    REFERENCES public.libro (id_libro) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.lista_libro
    ADD CONSTRAINT id_lista_f FOREIGN KEY (id_lista_f)
    REFERENCES public.lista_favoritos (id_lista_f) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS lista_libro_pkey
    ON public.lista_libro(id_lista_f);


ALTER TABLE IF EXISTS public.resena
    ADD CONSTRAINT id_libro FOREIGN KEY (id_libro)
    REFERENCES public.libro (id_libro) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.resena
    ADD CONSTRAINT id_usuario FOREIGN KEY (id_usuario)
    REFERENCES public.usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.restriccion_ubicacion
    ADD CONSTRAINT id_restriccion FOREIGN KEY (id_restriccion)
    REFERENCES public.restriccion (id_restriccion) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.restriccion_ubicacion
    ADD CONSTRAINT id_ubicacion FOREIGN KEY (id_ubicacion)
    REFERENCES public.ubicacion (id_ubicacion) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.sesion
    ADD CONSTRAINT id_usuario FOREIGN KEY (id_usuario)
    REFERENCES public.usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.usuario
    ADD CONSTRAINT id_ubicacion FOREIGN KEY (id_ubicacion)
    REFERENCES public.ubicacion (id_ubicacion) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.usuario_libro
    ADD CONSTRAINT id_libro FOREIGN KEY (id_libro)
    REFERENCES public.libro (id_libro) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS usuario_libro_pkey
    ON public.usuario_libro(id_libro);


ALTER TABLE IF EXISTS public.usuario_libro
    ADD CONSTRAINT id_usuario FOREIGN KEY (id_usuario)
    REFERENCES public.usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.usuario_rol
    ADD CONSTRAINT id_rol FOREIGN KEY (id_rol)
    REFERENCES public.rol (id_rol) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.usuario_rol
    ADD CONSTRAINT id_usuario FOREIGN KEY (id_usuario)
    REFERENCES public.usuario (id_usuario) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;